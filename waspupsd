#!/usr/bin/env python3.6
#
# This file is part of waspupsd.
#
# waspupsd is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# waspupsd is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with powerd.  If not, see <http://www.gnu.org/licenses/>.

# pylint: disable=broad-except
# pylint: disable=too-few-public-methods

"""Frontend for querying the SuperWASP UPSes via SNMP."""

import datetime
import Pyro4
from warwick.observatory.common import (
    daemons,
    log)

from warwick.observatory.power import (
    SNMPDevice,
    APCUPSStatusParameter,
    APCUPSBatteryRemainingParameter,
    APCUPSBatteryHealthyParameter,
    APCUPSOutputLoadParameter)

# Timeout in seconds for SNMP commands
SNMP_TIMEOUT = 2

UPS1_IP = '10.2.6.220'
UPS1_PARAMETERS = [
    APCUPSStatusParameter('ups1_status'),
    APCUPSBatteryRemainingParameter('ups1_battery_remaining'),
    APCUPSBatteryHealthyParameter('ups1_battery_healthy'),
    APCUPSOutputLoadParameter('ups1_load'),
]

UPS2_IP = '10.2.6.221'
UPS2_PARAMETERS = [
    APCUPSStatusParameter('ups2_status'),
    APCUPSBatteryRemainingParameter('ups2_battery_remaining'),
    APCUPSBatteryHealthyParameter('ups2_battery_healthy'),
    APCUPSOutputLoadParameter('ups2_load'),
]

class UPSMonitorDaemon:
    """Wraps a SNMP request to the UPSes"""
    def __init__(self):
        self._connection_error = False
        self._devices = [
            SNMPDevice('waspupsd', UPS1_IP, UPS1_PARAMETERS, SNMP_TIMEOUT),
            SNMPDevice('waspupsd', UPS2_IP, UPS2_PARAMETERS, SNMP_TIMEOUT),
        ]

        # Map of parameter name to device holding the parameter
        self._device_by_parameter = {}
        for device in self._devices:
            for parameter in device.parameters:
                self._device_by_parameter.update({parameter.name: device})

    @Pyro4.expose
    def last_measurement(self):
        """Query the latest valid measurement.
        May return None if no data is available"""
        try:
            data = {'date': datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ')}
            for device in self._devices:
                data.update(device.status())

            if self._connection_error:
                log.info('waspupsd', 'Restored connection to UPSes')
                self._connection_error = False
            return data

        except Exception as exception:
            print('{} ERROR: failed to query SNMP: {}' \
                  .format(datetime.datetime.utcnow(), str(exception)))

            if not self._connection_error:
                log.error('waspupsd', 'Lost connection to UPSes')
                self._connection_error = True

            return None

if __name__ == '__main__':
    daemons.superwasp_ups.launch(UPSMonitorDaemon())
